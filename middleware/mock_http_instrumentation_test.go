// Code generated by MockGen. DO NOT EDIT.
// Source: http_instrumentation.go

// Package middleware_test is a generated GoMock package.
package middleware_test

import (
	gomock "github.com/golang/mock/gomock"
	reflect "reflect"
)

// MockMetricReporter is a mock of MetricReporter interface
type MockMetricReporter struct {
	ctrl     *gomock.Controller
	recorder *MockMetricReporterMockRecorder
}

// MockMetricReporterMockRecorder is the mock recorder for MockMetricReporter
type MockMetricReporterMockRecorder struct {
	mock *MockMetricReporter
}

// NewMockMetricReporter creates a new mock instance
func NewMockMetricReporter(ctrl *gomock.Controller) *MockMetricReporter {
	mock := &MockMetricReporter{ctrl: ctrl}
	mock.recorder = &MockMetricReporterMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockMetricReporter) EXPECT() *MockMetricReporterMockRecorder {
	return m.recorder
}

// ReportLatency mocks base method
func (m *MockMetricReporter) ReportLatency(routeName, method string, statusCode int, duration float64) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "ReportLatency", routeName, method, statusCode, duration)
}

// ReportLatency indicates an expected call of ReportLatency
func (mr *MockMetricReporterMockRecorder) ReportLatency(routeName, method, statusCode, duration interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReportLatency", reflect.TypeOf((*MockMetricReporter)(nil).ReportLatency), routeName, method, statusCode, duration)
}
